/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column-width().
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-column-gutter().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Alias for j-span().
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-shift().
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * Alias for j-unshift().
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 * Aliases for j-edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Alias for j-center().
 */
/**
 * Uncenter an element.
 */
/**
 * Alias for j-uncenter().
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Alias for j-stack().
 */
/**
 * Unstack an element.
 */
/**
 * Alias for j-unstack().
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Alias for j-align().
 */
/**
 * Apply a clearfix to an element.
 */
/**
 * Alias for j-cf().
 */
/* Mixins */
/* Variables */
/*WIP*/
#WIP {
  height: 100vh;
  width: 100%; }
  #WIP .container {
    width: auto;
    max-width: 600;
    float: none;
    display: block;
    margin-right: auto;
    margin-left: auto;
    padding-left: 0;
    padding-right: 0;
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    clear: both;
    overflow: auto; }
    #WIP .container h1 {
      margin-left: 0;
      font-size: 150px; }

/* General CSS */
html, body {
  margin: 0;
  padding: 0; }

body {
  font-family: 'Open Sans',Helvetica, sans-serif;
  font-size: 12px;
  line-height: 12px; }

.wrapper {
  height: 100%; }
  .wrapper footer {
    position: absolute; }

h1, h2, h3, h4, h5, h6, p {
  margin: 0.5em;
  margin-left: 0;
  display: block;
  clear: both;
  color: #333333;
  font-weight: normal; }

h1 {
  font-family: Helvetica;
  font-size: 5em;
  color: #B3B3B3;
  font-weight: bold; }
  @media (min-width: 100px) and (max-width: 700px) {
    h1 {
      font-size: 40px; } }

h2 {
  font-size: 2em; }

h3 {
  font-size: 1.5em; }

p {
  font-size: 14px;
  line-height: 1.25em;
  color: #585858; }

.btn {
  border-radius: 0;
  border: 1px solid #D2D2D2;
  background-color: white;
  color: #D2D2D2;
  letter-spacing: 2px;
  font-size: 10px;
  text-decoration: none;
  margin: 0 10px;
  padding: 3px; }
  .btn .center {
    width: auto;
    max-width: 1410px;
    float: none;
    display: block;
    margin-right: auto;
    margin-left: auto;
    padding-left: 0;
    padding-right: 0; }

.btn:hover {
  background-color: #D2D2D2;
  color: white; }

.emphasis {
  font-family: Helvetica;
  font-weight: bold; }

.no-emphasis {
  text-align: right;
  font-weight: normal;
  color: #585858; }

.section {
  width: auto;
  max-width: 95%;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  position: relative;
  overflow: hidden;
  display: block; }

.clear {
  clear: both; }

.half-container {
  float: left;
  clear: none;
  width: 48.5%;
  margin-left: 0;
  margin-right: 3%;
  overflow: hidden; }
  .half-container:last-child {
    margin-right: 0; }

.side-container {
  float: left;
  clear: none;
  width: 35.625%;
  margin-left: 0;
  margin-right: 3%;
  overflow: hidden;
  display: inline-block;
  position: relative;
  margin-right: 0; }
  .side-container:last-child {
    margin-right: 0; }

.main-content {
  width: auto;
  max-width: 1410px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%); }

.vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%); }

img {
  width: 100%; }

.link {
  margin-top: 0;
  text-align: right;
  padding: 5px; }
  @media (min-width: 100px) and (max-width: 700px) {
    .link {
      font-size: 18px;
      text-align: center; } }

.divider-line {
  width: auto;
  max-width: 95%;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  border-bottom: 1px solid #D2D2D2;
  margin: 15px auto; }

.divider-line-hidden {
  width: auto;
  max-width: 95%;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  visibility: hidden;
  border-bottom: 1px solid #D2D2D2;
  margin-bottom: 20px; }
  @media (min-width: 100px) and (max-width: 700px) {
    .divider-line-hidden {
      visibility: visible; } }

.vertical-line {
  border-right: 2px solid #D2D2D2; }

.sub-menu-link {
  text-align: right;
  text-decoration: none;
  line-height: 30px;
  padding-right: 10px;
  color: #D2D2D2; }

.sub-menu-link:hover {
  color: black; }

/* Splash Specific Styles */
.intro {
  height: 90vh;
  text-align: right; }
  .intro .profile-img {
    position: relative;
    left: 51.5%; }
    @media (min-width: 100px) and (max-width: 700px) {
      .intro .profile-img {
        position: static;
        left: 0; } }
  .intro .profile-text {
    position: relative;
    left: -51.5%; }
    @media (min-width: 100px) and (max-width: 700px) {
      .intro .profile-text {
        position: static;
        left: 0; } }
  @media (min-width: 100px) and (max-width: 700px) {
    .intro {
      height: auto;
      margin-bottom: 20px; } }
  @media (min-width: 100px) and (max-width: 700px) {
    .intro .half-container {
      display: block;
      clear: both;
      float: none;
      width: 100%;
      margin-left: auto;
      margin-right: auto;
      top: 0;
      -webkit-transform: none;
      -ms-transform: none;
      transform: none; }
      .intro .half-container:first-child {
        margin-left: auto; }
      .intro .half-container:last-child {
        margin-right: auto; } }

.button-wrapper {
  width: auto;
  max-width: 500px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  height: 10vh;
  text-align: center;
  padding: 0; }
  .button-wrapper button {
    color: #D2D2D2;
    border-color: #D2D2D2;
    font-size: 12px;
    margin: 10px; }
  .button-wrapper button:hover {
    background-color: #D2D2D2;
    color: white; }

/* Work Specific CSS */
.gallery-wrapper {
  margin-bottom: 0px; }
@media (min-width: 100px) and (max-width: 700px) and (min-width: 100px) and (max-width: 700px) {
  .gallery-wrapper .half-container {
    display: block;
    clear: both;
    float: none;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 20px; }
    .gallery-wrapper .half-container:first-child {
      margin-left: auto; }
    .gallery-wrapper .half-container:last-child {
      margin-right: auto; } }

  @media (min-width: 100px) and (max-width: 700px) {
    .gallery-wrapper .gallery {
      margin-bottom: 0; } }
  .gallery-wrapper .gallery img {
    float: left;
    clear: none;
    width: 46.90722%;
    margin-left: 0;
    margin-right: 6.18557%;
    margin-bottom: 20px; }
    .gallery-wrapper .gallery img:nth-of-type(2n) {
      margin-right: 0;
      float: right; }
    .gallery-wrapper .gallery img:nth-of-type(2n + 1) {
      clear: both; }

/* Contact Specific CSS */
.contact-info {
  width: auto;
  max-width: 500;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  margin-bottom: 20px; }
  .contact-info ul {
    list-style-type: none;
    text-align: center; }
    .contact-info ul li {
      display: inline;
      padding-right: 15px; }
  .contact-info img {
    height: 30px;
    width: auto; }
  .contact-info .icon {
    fill: grey; }

/* Footer Styles */
footer {
  float: left;
  clear: none;
  width: 100%;
  margin-left: 0;
  margin-right: 0;
  height: 40px;
  background-color: #B3B3B3;
  bottom: 0; }

/** Work page Specific Styles */
.header {
  float: left;
  clear: none;
  width: 100%;
  margin-left: 0;
  margin-right: 0;
  height: 40px;
  border-bottom: 1px solid #D2D2D2;
  border-left: 6px solid #B3B3B3;
  top: 0;
  display: inline-block;
  position: relative;
  overflow: hidden;
  margin-bottom: 10px; }
  .header h2 {
    padding: 5px 0 0 0;
    margin: 0 0 0 10px;
    line-height: 40px; }
  .header ul {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    padding-top: 17px;
    list-style-type: none;
    text-align: right;
    padding-right: 20px; }
    .header ul li {
      display: inline; }

.work-menu {
  margin-top: 40px;
  display: inline-block;
  height: 70vh;
  max-height: 1100px;
  overflow: scroll; }
  .work-menu .work-entry {
    margin-bottom: 30px;
    line-height: 17px;
    padding: 10px;
    padding-left: 20px; }
    .work-menu .work-entry h3 {
      font-size: 16px;
      font-weight: 600;
      margin: 0;
      color: #4C4C4C; }
  .work-menu .work-entry:hover {
    background-color: #D2D2D2; }

.workspace {
  float: left;
  clear: none;
  width: 54.9375%;
  margin-left: 6.4375%;
  margin-right: 3%;
  margin-top: 40px;
  overflow: scroll;
  max-height: 1100px;
  height: 70vh; }
  .workspace:last-child {
    margin-right: 0; }
  .workspace img {
    width: 100%;
    height: auto;
    margin: 15px 0 10px; }
  .workspace p {
    margin-bottom: 40px; }
  .workspace .title {
    margin: 0 0 20px 0; }
    .workspace .title h2 {
      font-size: 36px; }

/*# sourceMappingURL=style.css.map */
